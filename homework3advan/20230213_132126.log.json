{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Quadro RTX 5000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.4, V11.4.120\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.30.0+8ea3ea3", "seed": 819805595, "exp_name": "pspnet_r50-d8_512x512_20k_voc.py", "mmseg_version": "0.30.0+8ea3ea3", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 2, 4),\n        strides=(1, 2, 1, 1),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True,\n        pretrained='open-mmlab://resnet50_v1c'),\n    decode_head=dict(\n        type='PSPHead',\n        in_channels=2048,\n        in_index=3,\n        channels=512,\n        pool_scales=(1, 2, 3, 6),\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    auxiliary_head=dict(\n        type='FCNHead',\n        in_channels=1024,\n        in_index=2,\n        channels=256,\n        num_convs=1,\n        concat_input=False,\n        dropout_ratio=0.1,\n        num_classes=19,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'PascalVOCDataset'\ndata_root = 'data/PASCAL_VOC/VOC2012'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations'),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='PascalVOCDataset',\n        data_root='data/PASCAL_VOC/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/train.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations'),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n        ]),\n    val=dict(\n        type='PascalVOCDataset',\n        data_root='data/PASCAL_VOC/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='PascalVOCDataset',\n        data_root='data/PASCAL_VOC/VOC2012',\n        img_dir='JPEGImages',\n        ann_dir='SegmentationClass',\n        split='ImageSets/Segmentation/val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict()\nlr_config = dict(policy='poly', power=0.9, min_lr=0.0001, by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=20000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU', pre_eval=True)\nloadfrom = 'checkpoints/pspnet_r50-d8_512x512_20k_voc12aug_20200617_101958-ed5dfbd9.pth'\nwork_dir = './work_dirs/pspnet_r50-d8_512x512_20k_voc'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 819805595\n", "CLASSES": ["background", "aeroplane", "bicycle", "bird", "boat", "bottle", "bus", "car", "cat", "chair", "cow", "diningtable", "dog", "horse", "motorbike", "person", "pottedplant", "sheep", "sofa", "train", "tvmonitor"], "PALETTE": [[0, 0, 0], [128, 0, 0], [0, 128, 0], [128, 128, 0], [0, 0, 128], [128, 0, 128], [0, 128, 128], [128, 128, 128], [64, 0, 0], [192, 0, 0], [64, 128, 0], [192, 128, 0], [64, 0, 128], [192, 0, 128], [64, 128, 128], [192, 128, 128], [0, 64, 0], [128, 64, 0], [0, 192, 0], [128, 192, 0], [0, 64, 128]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00998, "memory": 11575, "data_time": 0.00958, "decode.loss_ce": 1.40627, "decode.acc_seg": 62.09589, "aux.loss_ce": 0.59541, "aux.acc_seg": 60.86882, "loss": 2.00168, "time": 0.75697}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00996, "memory": 11575, "data_time": 0.00484, "decode.loss_ce": 1.1762, "decode.acc_seg": 64.79372, "aux.loss_ce": 0.47127, "aux.acc_seg": 64.79515, "loss": 1.64747, "time": 0.63795}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00993, "memory": 11575, "data_time": 0.00495, "decode.loss_ce": 1.23583, "decode.acc_seg": 61.93811, "aux.loss_ce": 0.49073, "aux.acc_seg": 62.59832, "loss": 1.72656, "time": 0.64165}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00991, "memory": 11575, "data_time": 0.00499, "decode.loss_ce": 1.07684, "decode.acc_seg": 66.24073, "aux.loss_ce": 0.44547, "aux.acc_seg": 66.0874, "loss": 1.5223, "time": 0.64424}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00989, "memory": 11575, "data_time": 0.00479, "decode.loss_ce": 1.15494, "decode.acc_seg": 62.93396, "aux.loss_ce": 0.4896, "aux.acc_seg": 63.0935, "loss": 1.64455, "time": 0.64626}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.00987, "memory": 11575, "data_time": 0.0049, "decode.loss_ce": 1.0046, "decode.acc_seg": 66.43238, "aux.loss_ce": 0.43687, "aux.acc_seg": 65.59153, "loss": 1.44147, "time": 0.64643}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.00984, "memory": 11575, "data_time": 0.00516, "decode.loss_ce": 1.02712, "decode.acc_seg": 67.83308, "aux.loss_ce": 0.46058, "aux.acc_seg": 65.75141, "loss": 1.4877, "time": 0.64685}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 0.00982, "memory": 11575, "data_time": 0.04858, "decode.loss_ce": 0.97395, "decode.acc_seg": 67.57535, "aux.loss_ce": 0.43038, "aux.acc_seg": 66.23874, "loss": 1.40433, "time": 0.69096}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 0.0098, "memory": 11575, "data_time": 0.005, "decode.loss_ce": 0.89975, "decode.acc_seg": 67.58552, "aux.loss_ce": 0.40923, "aux.acc_seg": 66.09143, "loss": 1.30898, "time": 0.64751}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 0.00978, "memory": 11575, "data_time": 0.00513, "decode.loss_ce": 0.92345, "decode.acc_seg": 69.27027, "aux.loss_ce": 0.41846, "aux.acc_seg": 67.27727, "loss": 1.34191, "time": 0.64783}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 0.00976, "memory": 11575, "data_time": 0.00483, "decode.loss_ce": 0.94184, "decode.acc_seg": 69.01062, "aux.loss_ce": 0.42514, "aux.acc_seg": 66.27742, "loss": 1.36698, "time": 0.64808}
{"mode": "train", "epoch": 2, "iter": 600, "lr": 0.00973, "memory": 11575, "data_time": 0.0051, "decode.loss_ce": 1.03259, "decode.acc_seg": 65.06341, "aux.loss_ce": 0.45597, "aux.acc_seg": 64.35586, "loss": 1.48856, "time": 0.64858}
{"mode": "train", "epoch": 2, "iter": 650, "lr": 0.00971, "memory": 11575, "data_time": 0.00501, "decode.loss_ce": 0.87373, "decode.acc_seg": 68.78331, "aux.loss_ce": 0.41402, "aux.acc_seg": 66.1464, "loss": 1.28775, "time": 0.64847}
{"mode": "train", "epoch": 2, "iter": 700, "lr": 0.00969, "memory": 11575, "data_time": 0.00499, "decode.loss_ce": 0.91745, "decode.acc_seg": 67.46387, "aux.loss_ce": 0.43291, "aux.acc_seg": 65.35275, "loss": 1.35036, "time": 0.64963}
{"mode": "train", "epoch": 3, "iter": 750, "lr": 0.00967, "memory": 11575, "data_time": 0.04907, "decode.loss_ce": 0.86302, "decode.acc_seg": 69.4324, "aux.loss_ce": 0.41455, "aux.acc_seg": 65.95279, "loss": 1.27757, "time": 0.69247}
{"mode": "train", "epoch": 3, "iter": 800, "lr": 0.00964, "memory": 11575, "data_time": 0.00507, "decode.loss_ce": 0.96334, "decode.acc_seg": 67.54173, "aux.loss_ce": 0.43715, "aux.acc_seg": 65.9752, "loss": 1.4005, "time": 0.64892}
{"mode": "train", "epoch": 3, "iter": 850, "lr": 0.00962, "memory": 11575, "data_time": 0.00512, "decode.loss_ce": 0.88514, "decode.acc_seg": 69.89464, "aux.loss_ce": 0.41903, "aux.acc_seg": 66.25915, "loss": 1.30417, "time": 0.64924}
{"mode": "train", "epoch": 3, "iter": 900, "lr": 0.0096, "memory": 11575, "data_time": 0.00496, "decode.loss_ce": 0.82056, "decode.acc_seg": 71.70463, "aux.loss_ce": 0.39333, "aux.acc_seg": 67.94001, "loss": 1.21389, "time": 0.64983}
{"mode": "train", "epoch": 3, "iter": 950, "lr": 0.00958, "memory": 11575, "data_time": 0.00528, "decode.loss_ce": 0.88316, "decode.acc_seg": 68.91165, "aux.loss_ce": 0.42078, "aux.acc_seg": 65.24155, "loss": 1.30394, "time": 0.64959}
{"mode": "train", "epoch": 3, "iter": 1000, "lr": 0.00955, "memory": 11575, "data_time": 0.00538, "decode.loss_ce": 0.79129, "decode.acc_seg": 72.27035, "aux.loss_ce": 0.38059, "aux.acc_seg": 67.99707, "loss": 1.17188, "time": 0.649}
{"mode": "train", "epoch": 3, "iter": 1050, "lr": 0.00953, "memory": 11575, "data_time": 0.00502, "decode.loss_ce": 0.73141, "decode.acc_seg": 73.70214, "aux.loss_ce": 0.36492, "aux.acc_seg": 70.32368, "loss": 1.09633, "time": 0.65099}
{"mode": "train", "epoch": 4, "iter": 1100, "lr": 0.00951, "memory": 11575, "data_time": 0.04897, "decode.loss_ce": 0.77971, "decode.acc_seg": 73.30845, "aux.loss_ce": 0.37816, "aux.acc_seg": 69.44864, "loss": 1.15788, "time": 0.69314}
{"mode": "train", "epoch": 4, "iter": 1150, "lr": 0.00949, "memory": 11575, "data_time": 0.00509, "decode.loss_ce": 0.79028, "decode.acc_seg": 70.42074, "aux.loss_ce": 0.38285, "aux.acc_seg": 67.54223, "loss": 1.17314, "time": 0.64994}
{"mode": "train", "epoch": 4, "iter": 1200, "lr": 0.00946, "memory": 11575, "data_time": 0.00505, "decode.loss_ce": 0.90059, "decode.acc_seg": 67.52632, "aux.loss_ce": 0.42844, "aux.acc_seg": 64.77486, "loss": 1.32903, "time": 0.65032}
{"mode": "train", "epoch": 4, "iter": 1250, "lr": 0.00944, "memory": 11575, "data_time": 0.0051, "decode.loss_ce": 0.79642, "decode.acc_seg": 72.25101, "aux.loss_ce": 0.39791, "aux.acc_seg": 68.14254, "loss": 1.19433, "time": 0.65003}
{"mode": "train", "epoch": 4, "iter": 1300, "lr": 0.00942, "memory": 11575, "data_time": 0.00528, "decode.loss_ce": 0.77701, "decode.acc_seg": 71.39658, "aux.loss_ce": 0.39759, "aux.acc_seg": 67.3353, "loss": 1.17461, "time": 0.65025}
{"mode": "train", "epoch": 4, "iter": 1350, "lr": 0.0094, "memory": 11575, "data_time": 0.0053, "decode.loss_ce": 0.75622, "decode.acc_seg": 72.84838, "aux.loss_ce": 0.36298, "aux.acc_seg": 69.31719, "loss": 1.1192, "time": 0.64951}
{"mode": "train", "epoch": 4, "iter": 1400, "lr": 0.00937, "memory": 11575, "data_time": 0.005, "decode.loss_ce": 0.80462, "decode.acc_seg": 71.3814, "aux.loss_ce": 0.38162, "aux.acc_seg": 67.3209, "loss": 1.18624, "time": 0.65102}
{"mode": "train", "epoch": 4, "iter": 1450, "lr": 0.00935, "memory": 11575, "data_time": 0.00509, "decode.loss_ce": 0.8255, "decode.acc_seg": 71.11552, "aux.loss_ce": 0.40389, "aux.acc_seg": 66.9707, "loss": 1.22939, "time": 0.65056}
{"mode": "train", "epoch": 5, "iter": 1500, "lr": 0.00933, "memory": 11575, "data_time": 0.04883, "decode.loss_ce": 0.78464, "decode.acc_seg": 70.72875, "aux.loss_ce": 0.40338, "aux.acc_seg": 65.44933, "loss": 1.18802, "time": 0.69377}
{"mode": "train", "epoch": 5, "iter": 1550, "lr": 0.00931, "memory": 11575, "data_time": 0.00526, "decode.loss_ce": 0.71717, "decode.acc_seg": 73.53622, "aux.loss_ce": 0.35867, "aux.acc_seg": 69.95823, "loss": 1.07584, "time": 0.65026}
{"mode": "train", "epoch": 5, "iter": 1600, "lr": 0.00928, "memory": 11575, "data_time": 0.00511, "decode.loss_ce": 0.75675, "decode.acc_seg": 72.72385, "aux.loss_ce": 0.37864, "aux.acc_seg": 68.28294, "loss": 1.13539, "time": 0.65}
{"mode": "train", "epoch": 5, "iter": 1650, "lr": 0.00926, "memory": 11575, "data_time": 0.0051, "decode.loss_ce": 0.71014, "decode.acc_seg": 73.25723, "aux.loss_ce": 0.37256, "aux.acc_seg": 67.69645, "loss": 1.0827, "time": 0.65154}
{"mode": "train", "epoch": 5, "iter": 1700, "lr": 0.00924, "memory": 11575, "data_time": 0.00504, "decode.loss_ce": 0.73324, "decode.acc_seg": 71.75893, "aux.loss_ce": 0.38353, "aux.acc_seg": 66.67989, "loss": 1.11678, "time": 0.65073}
{"mode": "train", "epoch": 5, "iter": 1750, "lr": 0.00922, "memory": 11575, "data_time": 0.00505, "decode.loss_ce": 0.67652, "decode.acc_seg": 73.60985, "aux.loss_ce": 0.37027, "aux.acc_seg": 67.81864, "loss": 1.04679, "time": 0.65048}
{"mode": "train", "epoch": 5, "iter": 1800, "lr": 0.00919, "memory": 11575, "data_time": 0.00519, "decode.loss_ce": 0.7477, "decode.acc_seg": 72.23346, "aux.loss_ce": 0.37994, "aux.acc_seg": 68.035, "loss": 1.12763, "time": 0.65058}
{"mode": "train", "epoch": 6, "iter": 1850, "lr": 0.00917, "memory": 11575, "data_time": 0.04857, "decode.loss_ce": 0.65748, "decode.acc_seg": 76.0082, "aux.loss_ce": 0.35156, "aux.acc_seg": 70.79428, "loss": 1.00904, "time": 0.69293}
{"mode": "train", "epoch": 6, "iter": 1900, "lr": 0.00915, "memory": 11575, "data_time": 0.00519, "decode.loss_ce": 0.6264, "decode.acc_seg": 76.19326, "aux.loss_ce": 0.36207, "aux.acc_seg": 69.33697, "loss": 0.98847, "time": 0.65059}
{"mode": "train", "epoch": 6, "iter": 1950, "lr": 0.00913, "memory": 11575, "data_time": 0.0053, "decode.loss_ce": 0.65189, "decode.acc_seg": 75.60744, "aux.loss_ce": 0.37244, "aux.acc_seg": 68.16113, "loss": 1.02434, "time": 0.65072}
{"mode": "train", "epoch": 6, "iter": 2000, "lr": 0.0091, "memory": 11575, "data_time": 0.00526, "decode.loss_ce": 0.75502, "decode.acc_seg": 72.70805, "aux.loss_ce": 0.39225, "aux.acc_seg": 67.01288, "loss": 1.14726, "time": 0.67395}
{"mode": "val", "epoch": 6, "iter": 1449, "lr": 0.0091, "aAcc": 0.7992, "mIoU": 0.2813, "mAcc": 0.4071, "IoU.background": 0.8217, "IoU.aeroplane": 0.4619, "IoU.bicycle": 0.2181, "IoU.bird": 0.2702, "IoU.boat": 0.2862, "IoU.bottle": 0.1095, "IoU.bus": 0.3753, "IoU.car": 0.3723, "IoU.cat": 0.4319, "IoU.chair": 0.1063, "IoU.cow": 0.041, "IoU.diningtable": 0.2111, "IoU.dog": 0.29, "IoU.horse": 0.3136, "IoU.motorbike": 0.4602, "IoU.person": 0.534, "IoU.pottedplant": 0.0986, "IoU.sheep": 0.2785, "IoU.sofa": 0.2264, "IoU.train": 0.0, "IoU.tvmonitor": 0.0, "Acc.background": 0.9265, "Acc.aeroplane": 0.6169, "Acc.bicycle": 0.2498, "Acc.bird": 0.6511, "Acc.boat": 0.3274, "Acc.bottle": 0.1104, "Acc.bus": 0.4245, "Acc.car": 0.466, "Acc.cat": 0.709, "Acc.chair": 0.1656, "Acc.cow": 0.0433, "Acc.diningtable": 0.3913, "Acc.dog": 0.3605, "Acc.horse": 0.4838, "Acc.motorbike": 0.7443, "Acc.person": 0.6862, "Acc.pottedplant": 0.1023, "Acc.sheep": 0.7167, "Acc.sofa": 0.374, "Acc.train": 0.0, "Acc.tvmonitor": 0.0}
{"mode": "train", "epoch": 6, "iter": 2050, "lr": 0.00908, "memory": 11575, "data_time": 5.77097, "decode.loss_ce": 0.73836, "decode.acc_seg": 74.74352, "aux.loss_ce": 0.38773, "aux.acc_seg": 68.14432, "loss": 1.1261, "time": 6.41662}
{"mode": "train", "epoch": 6, "iter": 2100, "lr": 0.00906, "memory": 11575, "data_time": 0.00512, "decode.loss_ce": 0.71, "decode.acc_seg": 74.5879, "aux.loss_ce": 0.37133, "aux.acc_seg": 69.30202, "loss": 1.08132, "time": 0.65121}
{"mode": "train", "epoch": 6, "iter": 2150, "lr": 0.00904, "memory": 11575, "data_time": 0.00498, "decode.loss_ce": 0.76767, "decode.acc_seg": 72.87426, "aux.loss_ce": 0.40218, "aux.acc_seg": 67.29417, "loss": 1.16986, "time": 0.65157}
{"mode": "train", "epoch": 7, "iter": 2200, "lr": 0.00901, "memory": 11575, "data_time": 0.04864, "decode.loss_ce": 0.69658, "decode.acc_seg": 74.786, "aux.loss_ce": 0.35965, "aux.acc_seg": 68.85104, "loss": 1.05624, "time": 0.69432}
{"mode": "train", "epoch": 7, "iter": 2250, "lr": 0.00899, "memory": 11575, "data_time": 0.00499, "decode.loss_ce": 0.61521, "decode.acc_seg": 76.94612, "aux.loss_ce": 0.34672, "aux.acc_seg": 70.75148, "loss": 0.96193, "time": 0.65114}
{"mode": "train", "epoch": 7, "iter": 2300, "lr": 0.00897, "memory": 11575, "data_time": 0.00506, "decode.loss_ce": 0.68562, "decode.acc_seg": 75.56833, "aux.loss_ce": 0.37654, "aux.acc_seg": 68.97103, "loss": 1.06216, "time": 0.65439}
{"mode": "train", "epoch": 7, "iter": 2350, "lr": 0.00895, "memory": 11575, "data_time": 0.00521, "decode.loss_ce": 0.7056, "decode.acc_seg": 73.82019, "aux.loss_ce": 0.38995, "aux.acc_seg": 66.94047, "loss": 1.09554, "time": 0.66709}
{"mode": "train", "epoch": 7, "iter": 2400, "lr": 0.00892, "memory": 11575, "data_time": 0.00531, "decode.loss_ce": 0.69242, "decode.acc_seg": 72.81638, "aux.loss_ce": 0.37859, "aux.acc_seg": 67.08634, "loss": 1.07101, "time": 0.65143}
{"mode": "train", "epoch": 7, "iter": 2450, "lr": 0.0089, "memory": 11575, "data_time": 0.00526, "decode.loss_ce": 0.64758, "decode.acc_seg": 74.42523, "aux.loss_ce": 0.35986, "aux.acc_seg": 68.87348, "loss": 1.00744, "time": 0.65204}
{"mode": "train", "epoch": 7, "iter": 2500, "lr": 0.00888, "memory": 11575, "data_time": 0.0053, "decode.loss_ce": 0.61021, "decode.acc_seg": 77.4811, "aux.loss_ce": 0.3355, "aux.acc_seg": 71.80225, "loss": 0.94571, "time": 0.65188}
{"mode": "train", "epoch": 7, "iter": 2550, "lr": 0.00886, "memory": 11575, "data_time": 0.00507, "decode.loss_ce": 0.69436, "decode.acc_seg": 74.58355, "aux.loss_ce": 0.38093, "aux.acc_seg": 67.76735, "loss": 1.07528, "time": 0.66106}
