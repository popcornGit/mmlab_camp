2023-02-06 16:22:25,885 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]
CUDA available: True
GPU 0,1: Quadro RTX 5000
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.4, V11.4.120
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.24.1+578c035
------------------------------------------------------------

2023-02-06 16:22:25,886 - mmcls - INFO - Distributed training: False
2023-02-06 16:22:26,039 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='EfficientNet', arch='b3'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1536,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
dataset_type = 'Flower'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='RandomResizedCrop',
        size=300,
        efficientnet_style=True,
        interpolation='bicubic'),
    dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='ToTensor', keys=['gt_label']),
    dict(type='Collect', keys=['img', 'gt_label'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='CenterCrop',
        crop_size=300,
        efficientnet_style=True,
        interpolation='bicubic'),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='ImageToTensor', keys=['img']),
    dict(type='Collect', keys=['img'])
]
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='Flower',
        data_prefix='data/flower_dataset/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='RandomResizedCrop',
                size=300,
                efficientnet_style=True,
                interpolation='bicubic'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ],
        ann_file='data/flower_dataset/train.txt',
        classes=['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']),
    val=dict(
        type='Flower',
        data_prefix='data/flower_dataset/val',
        ann_file='data/flower_dataset/val.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='CenterCrop',
                crop_size=300,
                efficientnet_style=True,
                interpolation='bicubic'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes=['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']),
    test=dict(
        type='Flower',
        data_prefix='data/flower_dataset/test',
        ann_file='data/flower_dataset/test.txt',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='CenterCrop',
                crop_size=300,
                efficientnet_style=True,
                interpolation='bicubic'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ],
        classes=['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']))
evaluation = dict(interval=1, metric='accuracy', metric_options=dict(topk=1))
optimizer = dict(type='SGD', lr=0.1, momentum=0.9, weight_decay=0.0001)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', step=[30, 60, 90])
runner = dict(type='EpochBasedRunner', max_epochs=100)
checkpoint_config = dict(interval=1)
log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = 'checkpoints/efficientnet/efficientnet-b3_3rdparty_8xb32-aa-advprop_in1k_20220119-53b41118.pth'
workflow = [('train', 1)]
classes = ['daisy', 'rose', 'dandelion', 'sunflower', 'tulip']
work_dir = './work_dirs/flower'
gpu_ids = [1]

2023-02-06 16:22:26,039 - mmcls - INFO - Set random seed to 708790620, deterministic: False
2023-02-06 16:22:26,253 - mmcls - INFO - initialize EfficientNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'layer': ['_BatchNorm', 'GroupNorm'], 'val': 1}]
2023-02-06 16:22:26,366 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.layers.0.conv.weight - torch.Size([40, 3, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.0.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.0.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.depthwise_conv.conv.weight - torch.Size([40, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.0.depthwise_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.depthwise_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.se.conv1.conv.weight - torch.Size([10, 40, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.0.se.conv1.conv.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.se.conv2.conv.weight - torch.Size([40, 10, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.0.se.conv2.conv.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.linear_conv.conv.weight - torch.Size([24, 40, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.0.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.0.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.depthwise_conv.conv.weight - torch.Size([24, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.1.depthwise_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.depthwise_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.se.conv1.conv.weight - torch.Size([6, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.1.se.conv1.conv.bias - torch.Size([6]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.se.conv2.conv.weight - torch.Size([24, 6, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.1.se.conv2.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.linear_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.1.1.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.1.1.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.expand_conv.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.0.expand_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.expand_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.depthwise_conv.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.0.depthwise_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.depthwise_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.se.conv1.conv.weight - torch.Size([6, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.0.se.conv1.conv.bias - torch.Size([6]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.se.conv2.conv.weight - torch.Size([144, 6, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.0.se.conv2.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.linear_conv.conv.weight - torch.Size([32, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.0.linear_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.0.linear_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.1.expand_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.expand_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.depthwise_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.1.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.se.conv1.conv.weight - torch.Size([8, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.1.se.conv1.conv.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.se.conv2.conv.weight - torch.Size([192, 8, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.1.se.conv2.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.linear_conv.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.1.linear_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.1.linear_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.2.expand_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.expand_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.depthwise_conv.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.se.conv1.conv.weight - torch.Size([8, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.2.se.conv1.conv.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.se.conv2.conv.weight - torch.Size([192, 8, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.2.se.conv2.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.linear_conv.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.2.2.linear_conv.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.2.2.linear_conv.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.expand_conv.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.0.expand_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.expand_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.0.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.se.conv1.conv.weight - torch.Size([8, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.0.se.conv1.conv.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.se.conv2.conv.weight - torch.Size([192, 8, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.0.se.conv2.conv.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.linear_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.0.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.0.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.expand_conv.conv.weight - torch.Size([288, 48, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.1.expand_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.expand_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.depthwise_conv.conv.weight - torch.Size([288, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.1.depthwise_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.depthwise_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.se.conv1.conv.weight - torch.Size([12, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.1.se.conv1.conv.bias - torch.Size([12]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.se.conv2.conv.weight - torch.Size([288, 12, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.1.se.conv2.conv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.linear_conv.conv.weight - torch.Size([48, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.1.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.1.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.expand_conv.conv.weight - torch.Size([288, 48, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.2.expand_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.expand_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.depthwise_conv.conv.weight - torch.Size([288, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.2.depthwise_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.depthwise_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.se.conv1.conv.weight - torch.Size([12, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.2.se.conv1.conv.bias - torch.Size([12]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.se.conv2.conv.weight - torch.Size([288, 12, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.2.se.conv2.conv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.linear_conv.conv.weight - torch.Size([48, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.3.2.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.3.2.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.expand_conv.conv.weight - torch.Size([288, 48, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.0.expand_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.expand_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.depthwise_conv.conv.weight - torch.Size([288, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.0.depthwise_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.depthwise_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.se.conv1.conv.weight - torch.Size([12, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.0.se.conv1.conv.bias - torch.Size([12]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.se.conv2.conv.weight - torch.Size([288, 12, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.0.se.conv2.conv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.linear_conv.conv.weight - torch.Size([96, 288, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.0.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.0.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.1.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.1.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.se.conv1.conv.weight - torch.Size([24, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.1.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.se.conv2.conv.weight - torch.Size([576, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.1.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.1.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.1.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.2.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.2.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.se.conv1.conv.weight - torch.Size([24, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.2.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.se.conv2.conv.weight - torch.Size([576, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.2.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.2.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.2.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.3.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.3.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.se.conv1.conv.weight - torch.Size([24, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.3.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.se.conv2.conv.weight - torch.Size([576, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.3.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.3.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.3.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.4.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.depthwise_conv.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.4.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.se.conv1.conv.weight - torch.Size([24, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.4.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.se.conv2.conv.weight - torch.Size([576, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.4.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.4.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.4.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.5.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.depthwise_conv.conv.weight - torch.Size([576, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.5.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.se.conv1.conv.weight - torch.Size([24, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.5.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.se.conv2.conv.weight - torch.Size([576, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.5.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.linear_conv.conv.weight - torch.Size([136, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.5.linear_conv.bn.weight - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.5.linear_conv.bn.bias - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.expand_conv.conv.weight - torch.Size([816, 136, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.6.expand_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.expand_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.depthwise_conv.conv.weight - torch.Size([816, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.6.depthwise_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.depthwise_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.se.conv1.conv.weight - torch.Size([34, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.6.se.conv1.conv.bias - torch.Size([34]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.se.conv2.conv.weight - torch.Size([816, 34, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.6.se.conv2.conv.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.linear_conv.conv.weight - torch.Size([136, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.6.linear_conv.bn.weight - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.6.linear_conv.bn.bias - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.expand_conv.conv.weight - torch.Size([816, 136, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.7.expand_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.expand_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.depthwise_conv.conv.weight - torch.Size([816, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.7.depthwise_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.depthwise_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.se.conv1.conv.weight - torch.Size([34, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.7.se.conv1.conv.bias - torch.Size([34]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.se.conv2.conv.weight - torch.Size([816, 34, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.7.se.conv2.conv.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.linear_conv.conv.weight - torch.Size([136, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.7.linear_conv.bn.weight - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.7.linear_conv.bn.bias - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.expand_conv.conv.weight - torch.Size([816, 136, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.8.expand_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.expand_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.depthwise_conv.conv.weight - torch.Size([816, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.8.depthwise_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.depthwise_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.se.conv1.conv.weight - torch.Size([34, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.8.se.conv1.conv.bias - torch.Size([34]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.se.conv2.conv.weight - torch.Size([816, 34, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.8.se.conv2.conv.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.linear_conv.conv.weight - torch.Size([136, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.8.linear_conv.bn.weight - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.8.linear_conv.bn.bias - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.expand_conv.conv.weight - torch.Size([816, 136, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.9.expand_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.expand_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.depthwise_conv.conv.weight - torch.Size([816, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.9.depthwise_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.depthwise_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.se.conv1.conv.weight - torch.Size([34, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.9.se.conv1.conv.bias - torch.Size([34]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.se.conv2.conv.weight - torch.Size([816, 34, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.9.se.conv2.conv.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.linear_conv.conv.weight - torch.Size([136, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.4.9.linear_conv.bn.weight - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.4.9.linear_conv.bn.bias - torch.Size([136]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.expand_conv.conv.weight - torch.Size([816, 136, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.0.expand_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.expand_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.depthwise_conv.conv.weight - torch.Size([816, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.0.depthwise_conv.bn.weight - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.depthwise_conv.bn.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.se.conv1.conv.weight - torch.Size([34, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.0.se.conv1.conv.bias - torch.Size([34]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.se.conv2.conv.weight - torch.Size([816, 34, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.0.se.conv2.conv.bias - torch.Size([816]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.linear_conv.conv.weight - torch.Size([232, 816, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.0.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.0.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.1.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.depthwise_conv.conv.weight - torch.Size([1392, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.1.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.1.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.1.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.linear_conv.conv.weight - torch.Size([232, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.1.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.1.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.2.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.depthwise_conv.conv.weight - torch.Size([1392, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.2.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.2.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.2.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.linear_conv.conv.weight - torch.Size([232, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.2.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.2.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.3.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.depthwise_conv.conv.weight - torch.Size([1392, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.3.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.3.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.3.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.linear_conv.conv.weight - torch.Size([232, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.3.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.3.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.4.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.depthwise_conv.conv.weight - torch.Size([1392, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.4.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.4.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.4.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.linear_conv.conv.weight - torch.Size([232, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.4.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.4.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.5.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.depthwise_conv.conv.weight - torch.Size([1392, 1, 5, 5]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.5.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.5.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.5.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.linear_conv.conv.weight - torch.Size([232, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.5.linear_conv.bn.weight - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.5.linear_conv.bn.bias - torch.Size([232]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.expand_conv.conv.weight - torch.Size([1392, 232, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.6.expand_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.expand_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.depthwise_conv.conv.weight - torch.Size([1392, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.6.depthwise_conv.bn.weight - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.depthwise_conv.bn.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.se.conv1.conv.weight - torch.Size([58, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.6.se.conv1.conv.bias - torch.Size([58]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.se.conv2.conv.weight - torch.Size([1392, 58, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.6.se.conv2.conv.bias - torch.Size([1392]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.linear_conv.conv.weight - torch.Size([384, 1392, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.6.linear_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.6.linear_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.expand_conv.conv.weight - torch.Size([2304, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.7.expand_conv.bn.weight - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.expand_conv.bn.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.depthwise_conv.conv.weight - torch.Size([2304, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.7.depthwise_conv.bn.weight - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.depthwise_conv.bn.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.se.conv1.conv.weight - torch.Size([96, 2304, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.7.se.conv1.conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.se.conv2.conv.weight - torch.Size([2304, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.7.se.conv2.conv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.linear_conv.conv.weight - torch.Size([384, 2304, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.5.7.linear_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.5.7.linear_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.conv.weight - torch.Size([1536, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layers.6.bn.weight - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layers.6.bn.bias - torch.Size([1536]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1536]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-06 16:22:32,104 - mmcls - INFO - load checkpoint from local path: checkpoints/efficientnet/efficientnet-b3_3rdparty_8xb32-aa-advprop_in1k_20220119-53b41118.pth
2023-02-06 16:22:32,228 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1536]) from checkpoint, the shape in current model is torch.Size([5, 1536]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
