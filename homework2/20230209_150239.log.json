{"env_info": "sys.platform: linux\nPython: 3.8.13 (default, Mar 28 2022, 11:38:47) [GCC 7.5.0]\nCUDA available: True\nGPU 0,1: Quadro RTX 5000\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.4, V11.4.120\nGCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3\nMMDetection: 2.25.3+e71b499", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        init_cfg=dict(\n            type='Pretrained',\n            checkpoint='open-mmlab://detectron2/resnet50_caffe')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/train.json',\n        img_prefix='data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='LoadAnnotations',\n                with_bbox=True,\n                with_mask=True,\n                poly2mask=False),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/val.json',\n        img_prefix='data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[103.53, 116.28, 123.675],\n                        std=[1.0, 1.0, 1.0],\n                        to_rgb=False),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn/mask_rcnn_r50_caffe_fpn_mstrain-poly_3x_coco_bbox_mAP-0.408__segm_mAP-0.37_20200504_163245-42aa3d00.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 2063105729, "exp_name": "mask_rcnn_r50_caffe_fpn_mstrain-poly_1x_balloon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.285, "bbox_mAP_50": 0.461, "bbox_mAP_75": 0.311, "bbox_mAP_s": 0.019, "bbox_mAP_m": 0.14, "bbox_mAP_l": 0.354, "bbox_mAP_copypaste": "0.285 0.461 0.311 0.019 0.140 0.354", "segm_mAP": 0.341, "segm_mAP_50": 0.481, "segm_mAP_75": 0.402, "segm_mAP_s": 0.006, "segm_mAP_m": 0.124, "segm_mAP_l": 0.455, "segm_mAP_copypaste": "0.341 0.481 0.402 0.006 0.124 0.455"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.539, "bbox_mAP_50": 0.803, "bbox_mAP_75": 0.699, "bbox_mAP_s": 0.151, "bbox_mAP_m": 0.401, "bbox_mAP_l": 0.61, "bbox_mAP_copypaste": "0.539 0.803 0.699 0.151 0.401 0.610", "segm_mAP": 0.682, "segm_mAP_50": 0.801, "segm_mAP_75": 0.793, "segm_mAP_s": 0.067, "segm_mAP_m": 0.511, "segm_mAP_l": 0.759, "segm_mAP_copypaste": "0.682 0.801 0.793 0.067 0.511 0.759"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.651, "bbox_mAP_50": 0.876, "bbox_mAP_75": 0.849, "bbox_mAP_s": 0.454, "bbox_mAP_m": 0.59, "bbox_mAP_l": 0.683, "bbox_mAP_copypaste": "0.651 0.876 0.849 0.454 0.590 0.683", "segm_mAP": 0.736, "segm_mAP_50": 0.867, "segm_mAP_75": 0.849, "segm_mAP_s": 0.177, "segm_mAP_m": 0.658, "segm_mAP_l": 0.78, "segm_mAP_copypaste": "0.736 0.867 0.849 0.177 0.658 0.780"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.698, "bbox_mAP_50": 0.862, "bbox_mAP_75": 0.83, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.569, "bbox_mAP_l": 0.756, "bbox_mAP_copypaste": "0.698 0.862 0.830 0.252 0.569 0.756", "segm_mAP": 0.759, "segm_mAP_50": 0.838, "segm_mAP_75": 0.817, "segm_mAP_s": 0.353, "segm_mAP_m": 0.523, "segm_mAP_l": 0.829, "segm_mAP_copypaste": "0.759 0.838 0.817 0.353 0.523 0.829"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.698, "bbox_mAP_50": 0.868, "bbox_mAP_75": 0.827, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.514, "bbox_mAP_l": 0.771, "bbox_mAP_copypaste": "0.698 0.868 0.827 0.252 0.514 0.771", "segm_mAP": 0.779, "segm_mAP_50": 0.847, "segm_mAP_75": 0.837, "segm_mAP_s": 0.404, "segm_mAP_m": 0.592, "segm_mAP_l": 0.847, "segm_mAP_copypaste": "0.779 0.847 0.837 0.404 0.592 0.847"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.687, "bbox_mAP_50": 0.863, "bbox_mAP_75": 0.845, "bbox_mAP_s": 0.404, "bbox_mAP_m": 0.452, "bbox_mAP_l": 0.754, "bbox_mAP_copypaste": "0.687 0.863 0.845 0.404 0.452 0.754", "segm_mAP": 0.761, "segm_mAP_50": 0.863, "segm_mAP_75": 0.823, "segm_mAP_s": 0.353, "segm_mAP_m": 0.482, "segm_mAP_l": 0.841, "segm_mAP_copypaste": "0.761 0.863 0.823 0.353 0.482 0.841"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.69, "bbox_mAP_50": 0.85, "bbox_mAP_75": 0.794, "bbox_mAP_s": 0.303, "bbox_mAP_m": 0.429, "bbox_mAP_l": 0.769, "bbox_mAP_copypaste": "0.690 0.850 0.794 0.303 0.429 0.769", "segm_mAP": 0.762, "segm_mAP_50": 0.85, "segm_mAP_75": 0.836, "segm_mAP_s": 0.404, "segm_mAP_m": 0.468, "segm_mAP_l": 0.843, "segm_mAP_copypaste": "0.762 0.850 0.836 0.404 0.468 0.843"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.722, "bbox_mAP_50": 0.843, "bbox_mAP_75": 0.82, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.421, "bbox_mAP_l": 0.827, "bbox_mAP_copypaste": "0.722 0.843 0.820 0.353 0.421 0.827", "segm_mAP": 0.719, "segm_mAP_50": 0.819, "segm_mAP_75": 0.802, "segm_mAP_s": 0.353, "segm_mAP_m": 0.318, "segm_mAP_l": 0.843, "segm_mAP_copypaste": "0.719 0.819 0.802 0.353 0.318 0.843"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.764, "bbox_mAP_50": 0.886, "bbox_mAP_75": 0.843, "bbox_mAP_s": 0.252, "bbox_mAP_m": 0.559, "bbox_mAP_l": 0.842, "bbox_mAP_copypaste": "0.764 0.886 0.843 0.252 0.559 0.842", "segm_mAP": 0.799, "segm_mAP_50": 0.862, "segm_mAP_75": 0.845, "segm_mAP_s": 0.404, "segm_mAP_m": 0.519, "segm_mAP_l": 0.879, "segm_mAP_copypaste": "0.799 0.862 0.845 0.404 0.519 0.879"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.766, "bbox_mAP_50": 0.882, "bbox_mAP_75": 0.843, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.464, "bbox_mAP_l": 0.852, "bbox_mAP_copypaste": "0.766 0.882 0.843 0.353 0.464 0.852", "segm_mAP": 0.792, "segm_mAP_50": 0.859, "segm_mAP_75": 0.841, "segm_mAP_s": 0.404, "segm_mAP_m": 0.427, "segm_mAP_l": 0.878, "segm_mAP_copypaste": "0.792 0.859 0.841 0.404 0.427 0.878"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.76, "bbox_mAP_50": 0.874, "bbox_mAP_75": 0.854, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.474, "bbox_mAP_l": 0.838, "bbox_mAP_copypaste": "0.760 0.874 0.854 0.353 0.474 0.838", "segm_mAP": 0.795, "segm_mAP_50": 0.853, "segm_mAP_75": 0.853, "segm_mAP_s": 0.404, "segm_mAP_m": 0.456, "segm_mAP_l": 0.878, "segm_mAP_copypaste": "0.795 0.853 0.853 0.404 0.456 0.878"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.78, "bbox_mAP_50": 0.878, "bbox_mAP_75": 0.858, "bbox_mAP_s": 0.353, "bbox_mAP_m": 0.483, "bbox_mAP_l": 0.87, "bbox_mAP_copypaste": "0.780 0.878 0.858 0.353 0.483 0.870", "segm_mAP": 0.797, "segm_mAP_50": 0.856, "segm_mAP_75": 0.838, "segm_mAP_s": 0.404, "segm_mAP_m": 0.466, "segm_mAP_l": 0.885, "segm_mAP_copypaste": "0.797 0.856 0.838 0.404 0.466 0.885"}
